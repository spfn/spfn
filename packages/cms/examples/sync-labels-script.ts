/**
 * Manual Label Sync Script
 *
 * ÏàòÎèôÏúºÎ°ú ÎùºÎ≤®ÏùÑ ÎèôÍ∏∞ÌôîÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 *
 * ÏÇ¨Ïö©Î≤ï:
 * 1. Ïù¥ ÌååÏùºÏùÑ `scripts/sync-labels.ts`Î°ú Î≥µÏÇ¨
 * 2. Ïã§Ìñâ: `tsx scripts/sync-labels.ts`
 */

import { syncAll } from '@spfn/cms';

async function main()
{
    console.log('üîÑ Starting label synchronization...\n');

    try
    {
        const results = await syncAll({
            verbose: true,
            updateExisting: false,  // Í∏∞Ï°¥ ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏ ÏïàÌï®
            removeUnused: false,    // ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÎäî ÎùºÎ≤® ÏÇ≠Ï†ú ÏïàÌï®
            dryRun: false,          // Ïã§Ï†úÎ°ú Ï†ÅÏö© (trueÎ°ú ÏÑ§Ï†ïÌïòÎ©¥ ÎØ∏Î¶¨Î≥¥Í∏∞)
        });

        // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
        const totalCreated = results.reduce((sum, r) => sum + r.created, 0);
        const totalUpdated = results.reduce((sum, r) => sum + r.updated, 0);
        const totalUnchanged = results.reduce((sum, r) => sum + r.unchanged, 0);
        const totalDeleted = results.reduce((sum, r) => sum + r.deleted, 0);
        const totalErrors = results.reduce((sum, r) => sum + r.errors.length, 0);

        console.log('\n‚úÖ Label synchronization completed!\n');
        console.log('Summary:');
        console.log(`  Sections:  ${results.length}`);
        console.log(`  Created:   ${totalCreated}`);
        console.log(`  Updated:   ${totalUpdated}`);
        console.log(`  Unchanged: ${totalUnchanged}`);
        console.log(`  Deleted:   ${totalDeleted}`);

        if (totalErrors > 0)
        {
            console.log(`  Errors:    ${totalErrors}\n`);
            console.error('\nErrors:');
            results.forEach((result) =>
            {
                result.errors.forEach((error) =>
                {
                    console.error(`  [${result.section}] ${error.key}: ${error.error}`);
                });
            });
            process.exit(1);
        }
    }
    catch (error)
    {
        console.error('\n‚ùå Label synchronization failed:', error);
        process.exit(1);
    }
}

main();