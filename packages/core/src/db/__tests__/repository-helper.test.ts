/**
 * Repository Helper Pattern Tests
 *
 * Tests the generated repository helper pattern that uses getDb().for()
 * This simulates the actual code generated by `spfn generate` command
 */

import { describe, it, expect, beforeAll, afterAll, beforeEach } from 'vitest';
import type { Sql } from 'postgres';
import * as postgres from 'postgres';
import { testUsers } from './fixtures/entities';
import { Repository, getDb } from '../index.js';
import { initDatabase, closeDatabase } from '../manager';

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL)
{
    throw new Error('DATABASE_URL environment variable is required for tests');
}

/**
 * Simulates generated repository helper function
 * This is exactly what the template generates
 */
function getTestUsersRepository()
{
    const db = getDb();
    return db.for(testUsers);
}

describe('Repository Helper Pattern (Generated Code Simulation)', () =>
{
    let client: Sql;

    beforeAll(async () =>
    {
        client = postgres(DATABASE_URL, { max: 1 });

        // Initialize database manager (similar to what happens in server startup)
        await initDatabase();
    });

    afterAll(async () =>
    {
        // Clean up test data
        await client`TRUNCATE TABLE test_users CASCADE`;
        await client.end();
        await closeDatabase();
    });

    beforeEach(async () =>
    {
        // Reset data before each test
        await client`TRUNCATE TABLE test_users CASCADE`;
    });

    describe('getDb().for() pattern', () =>
    {
        it('should create repository instance using getDb().for()', async () =>
        {
            const db = getDb();
            const repo = db.for(testUsers);

            expect(repo).toBeInstanceOf(Repository);
        });

        it('should work with generated helper function', async () =>
        {
            const repo = getTestUsersRepository();

            expect(repo).toBeInstanceOf(Repository);
        });

        it('should perform CRUD operations using helper function', async () =>
        {
            const repo = getTestUsersRepository();

            // Create
            const created = await repo.save({
                email: 'helper@example.com',
                name: 'Helper Test',
            });

            expect(created.id).toBeDefined();
            expect(created.email).toBe('helper@example.com');

            // Read
            const found = await repo.findById(created.id);
            expect(found).toBeDefined();
            expect(found?.email).toBe('helper@example.com');

            // Update
            const updated = await repo.update(created.id, {
                name: 'Updated Name',
            });
            expect(updated?.name).toBe('Updated Name');

            // Delete
            const deleted = await repo.delete(created.id);
            expect(deleted).toBeDefined();

            // Verify deletion
            const notFound = await repo.findById(created.id);
            expect(notFound).toBeNull();
        });

        it('should return properly typed repository', async () =>
        {
            const repo = getTestUsersRepository();

            // Type check: save should accept insert type
            const newUser = {
                email: 'type@example.com',
                name: 'Type Test',
            };

            const created = await repo.save(newUser);

            // Type check: result should have select type properties
            expect(created.id).toBeDefined();
            expect(created.email).toBe('type@example.com');
            expect(created.createdAt).toBeDefined();
            expect(created.updatedAt).toBeDefined();
        });
    });

    describe('Multiple repository instances', () =>
    {
        it('should create independent repository instances', async () =>
        {
            const repo1 = getTestUsersRepository();
            const repo2 = getTestUsersRepository();

            const user1 = await repo1.save({ email: 'repo1@example.com' });
            const user2 = await repo2.save({ email: 'repo2@example.com' });

            expect(user1.id).not.toBe(user2.id);

            const found1 = await repo1.findById(user1.id);
            const found2 = await repo2.findById(user2.id);

            expect(found1?.email).toBe('repo1@example.com');
            expect(found2?.email).toBe('repo2@example.com');
        });
    });
});