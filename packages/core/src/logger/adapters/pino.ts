/**
 * Pino Logger Adapter
 *
 * PinoÎ•º ÏÇ¨Ïö©ÌïòÎäî Logger Adapter Íµ¨ÌòÑ
 *
 * ‚úÖ Íµ¨ÌòÑ ÏôÑÎ£å:
 * - Pino Í∏∞Î∞ò Î°úÍπÖ
 * - Child logger ÏßÄÏõê
 * - Error Í∞ùÏ≤¥ Ï≤òÎ¶¨ (err ÌïÑÎìú)
 * - Context Î≥ëÌï©
 * - ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï (pretty print)
 * - ÌååÏùº Î°úÍπÖ with Rotation (ÏûêÏ≤¥ Íµ¨Ï∂ïÏö©)
 *
 * üí° Î∞∞Ìè¨ ÏãúÎÇòÎ¶¨Ïò§:
 * - K8s: StdoutÎßå (Î°úÍ∑∏ ÏàòÏßëÍ∏∞Í∞Ä Ï≤òÎ¶¨)
 * - ÏûêÏ≤¥ Íµ¨Ï∂ï: Stdout + File with Rotation
 *
 * üí° ÌäπÏßï:
 * - Í≥†ÏÑ±Îä• (WinstonÎ≥¥Îã§ 5-10Î∞∞ Îπ†Î¶Ñ)
 * - JSON Í∏∞Î≥∏ Ìè¨Îß∑
 * - ÌîÑÎ°úÎçïÏÖò Í≤ÄÏ¶ùÎê® (Netflix, Elastic ÏÇ¨Ïö©)
 *
 * üîó Í¥ÄÎ†® ÌååÏùº:
 * - src/logger/adapters/types.ts (Ïù∏ÌÑ∞ÌéòÏù¥Ïä§)
 * - src/logger/index.ts (Adapter ÏÑ†ÌÉù)
 * - src/logger/config.ts (ÏÑ§Ï†ï)
 */

import pino from 'pino';
import type { LoggerAdapter, AdapterConfig, LogLevel } from './types';

/**
 * Pino Logger Adapter
 */
export class PinoAdapter implements LoggerAdapter
{
    private logger: pino.Logger;

    constructor(config: AdapterConfig)
    {
        const isProduction = process.env.NODE_ENV === 'production';
        const isDevelopment = process.env.NODE_ENV === 'development';
        const fileLoggingEnabled = process.env.LOGGER_FILE_ENABLED === 'true';

        // Transport ÏÑ§Ï†ï
        const targets: pino.TransportTargetOptions[] = [];

        // 1. Stdout Transport (Ìï≠ÏÉÅ)
        if (!isProduction && isDevelopment)
        {
            // Í∞úÎ∞ú: Pretty Print
            targets.push({
                target: 'pino-pretty',
                level: 'debug',
                options: {
                    colorize: true,
                    translateTime: 'SYS:yyyy-mm-dd HH:MM:ss.l',
                    ignore: 'pid,hostname',
                },
            });
        }
        else
        {
            // ÌîÑÎ°úÎçïÏÖò: JSON (Í∏∞Î≥∏ stdout)
            // targetsÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú stdout JSON ÏÇ¨Ïö©
        }

        // 2. File Transport (ÏûêÏ≤¥ Íµ¨Ï∂ï Ïãú)
        if (fileLoggingEnabled && isProduction)
        {
            const logDir = process.env.LOG_DIR || './logs';
            const maxFileSize = process.env.LOG_MAX_FILE_SIZE || '10M';
            const maxFiles = parseInt(process.env.LOG_MAX_FILES || '10', 10);

            targets.push({
                target: 'pino-roll',
                level: 'info',
                options: {
                    file: `${logDir}/app.log`,
                    frequency: 'daily',
                    size: maxFileSize,
                    limit: { count: maxFiles },
                    mkdir: true,
                },
            });
        }

        this.logger = pino({
            level: config.level,

            // Transport ÏÑ§Ï†ï (targetsÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ stdout)
            transport: targets.length > 0 ? { targets } : undefined,

            // Í∏∞Î≥∏ ÌïÑÎìú
            base: config.module ? { module: config.module } : undefined,
        });
    }

    child(module: string): LoggerAdapter
    {
        const childLogger = new PinoAdapter({ level: this.logger.level as LogLevel, module });
        childLogger.logger = this.logger.child({ module });
        return childLogger;
    }

    debug(message: string, context?: Record<string, unknown>): void
    {
        this.logger.debug(context || {}, message);
    }

    info(message: string, context?: Record<string, unknown>): void
    {
        this.logger.info(context || {}, message);
    }

    warn(message: string, errorOrContext?: Error | Record<string, unknown>, context?: Record<string, unknown>): void
    {
        if (errorOrContext instanceof Error)
        {
            this.logger.warn({ err: errorOrContext, ...context }, message);
        }
        else
        {
            this.logger.warn(errorOrContext || {}, message);
        }
    }

    error(message: string, errorOrContext?: Error | Record<string, unknown>, context?: Record<string, unknown>): void
    {
        if (errorOrContext instanceof Error)
        {
            this.logger.error({ err: errorOrContext, ...context }, message);
        }
        else
        {
            this.logger.error(errorOrContext || {}, message);
        }
    }

    fatal(message: string, errorOrContext?: Error | Record<string, unknown>, context?: Record<string, unknown>): void
    {
        if (errorOrContext instanceof Error)
        {
            this.logger.fatal({ err: errorOrContext, ...context }, message);
        }
        else
        {
            this.logger.fatal(errorOrContext || {}, message);
        }
    }

    async close(): Promise<void>
    {
        // PinoÎäî ÏûêÎèôÏúºÎ°ú flushÎê®
        // ÌïÑÏöîÏãú pino.final() ÏÇ¨Ïö© Í∞ÄÎä•
    }
}