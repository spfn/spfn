/**
 * {{ENTITY_NAME_PASCAL}} Repository
 *
 * Generated from entity: {{ENTITY_NAME}}
 *
 * This file provides a type-safe repository helper for {{ENTITY_NAME}} CRUD operations.
 * Creates Repository instance with transaction support via getDb().
 *
 * @generated {{TIMESTAMP}}
 */
import { Repository, getDb } from '@spfn/core/db';
import { {{ENTITY_NAME}} } from '../entities/{{ENTITY_NAME}}.js';

type {{TYPE_SELECT}} = typeof {{ENTITY_NAME}}.$inferSelect;
type {{TYPE_INSERT}} = typeof {{ENTITY_NAME}}.$inferInsert;

/**
 * Get {{ENTITY_NAME}} repository with transaction support
 *
 * Available methods:
 * - findById(id: number): Promise<{{TYPE_SELECT}} | undefined>
 * - findAll(options?): Promise<{{TYPE_SELECT}}[]>
 * - findPage(options): Promise<{ items: {{TYPE_SELECT}}[], total: number, page: number, limit: number }>
 * - save(data: Partial<{{TYPE_INSERT}}>): Promise<{{TYPE_SELECT}}>
 * - update(id: number, data: Partial<{{TYPE_INSERT}}>): Promise<{{TYPE_SELECT}}>
 * - delete(id: number): Promise<void>
 *
 * Usage:
 * ```typescript
 * const repo = get{{ENTITY_NAME_PASCAL}}Repository();
 * const items = await repo.findAll();
 * ```
 */
export function get{{ENTITY_NAME_PASCAL}}Repository() {
    const db = getDb();
    return db.for({{ENTITY_NAME}});
}