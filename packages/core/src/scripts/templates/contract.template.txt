/**
 * {{ENTITY_NAME_PASCAL}} Contracts
 *
 * Generated from entity: {{ENTITY_NAME}}
 *
 * Type-safe API contracts with automatic validation using drizzle-typebox.
 * Schemas are automatically generated from Drizzle ORM entity definitions.
 *
 * @generated {{TIMESTAMP}}
 */
import { Type } from '@sinclair/typebox';
import { createInsertSchema, createSelectSchema } from 'drizzle-typebox';
import { {{ENTITY_NAME}} } from '../../entities/{{ENTITY_NAME}}.js';

/**
 * Generated TypeBox schemas from Drizzle entity
 */
export const insert{{ENTITY_NAME_PASCAL}}Schema = createInsertSchema({{ENTITY_NAME}});
export const select{{ENTITY_NAME_PASCAL}}Schema = createSelectSchema({{ENTITY_NAME}});
export const update{{ENTITY_NAME_PASCAL}}Schema = Type.Partial(insert{{ENTITY_NAME_PASCAL}}Schema);

/**
 * GET /{{ENTITY_NAME}} - List {{ENTITY_NAME}} with pagination
 */
export const get{{ENTITY_NAME_PASCAL}}ListContract = {
    method: 'GET' as const,
    path: '/',
    query: Type.Object({
        page: Type.Optional(Type.Number({ minimum: 1 })),
        limit: Type.Optional(Type.Number({ minimum: 1, maximum: 100 })),
    }),
    response: Type.Object({
        items: Type.Array(select{{ENTITY_NAME_PASCAL}}Schema),
        total: Type.Number(),
        page: Type.Number(),
        limit: Type.Number(),
    })
};

/**
 * POST /{{ENTITY_NAME}} - Create new {{ENTITY_NAME_SINGULAR}}
 */
export const create{{ENTITY_NAME_PASCAL_SINGULAR}}Contract = {
    method: 'POST' as const,
    path: '/',
    body: insert{{ENTITY_NAME_PASCAL}}Schema,
    response: select{{ENTITY_NAME_PASCAL}}Schema
};

/**
 * GET /{{ENTITY_NAME}}/:id - Get {{ENTITY_NAME_SINGULAR}} by ID
 */
export const get{{ENTITY_NAME_PASCAL_SINGULAR}}Contract = {
    method: 'GET' as const,
    path: '/:id',
    params: Type.Object({
        id: Type.String()
    }),
    response: select{{ENTITY_NAME_PASCAL}}Schema
};

/**
 * PUT /{{ENTITY_NAME}}/:id - Update {{ENTITY_NAME_SINGULAR}}
 */
export const update{{ENTITY_NAME_PASCAL_SINGULAR}}Contract = {
    method: 'PUT' as const,
    path: '/:id',
    params: Type.Object({
        id: Type.String()
    }),
    body: update{{ENTITY_NAME_PASCAL}}Schema,
    response: select{{ENTITY_NAME_PASCAL}}Schema
};

/**
 * DELETE /{{ENTITY_NAME}}/:id - Delete {{ENTITY_NAME_SINGULAR}}
 */
export const delete{{ENTITY_NAME_PASCAL_SINGULAR}}Contract = {
    method: 'DELETE' as const,
    path: '/:id',
    params: Type.Object({
        id: Type.String()
    }),
    response: Type.Object({
        success: Type.Boolean()
    })
};